/**
 * This header is generated by class-dump-z 0.2a.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: (null)
 */

@class NSString, NSTimer, SKConversation, SKVideo, SKContact;

__attribute__((visibility("hidden")))
@interface SKParticipant : NSObject {
	NSString* _identity;
	SKContact* _contact;
	SKConversation* _conversation;
	SKVideo* _video;
	SKVideo* _previewVideo;
	CGRect _screensharingCaptureRect;
	NSTimer* _liveDurationTimer;
	BOOL _isObservingContact;
	BOOL _isEmergencyPSTN;
	BOOL _autostartVideoNextTime;
	BOOL _autostartScreensharingNextTime;
	BOOL _lastStatusInProgress;
	BOOL _minimised;
	BOOL _conversationIsLive;
	BOOL _isHost;
	BOOL _isMyself;
	BOOL _myselfIsHost;
	BOOL _hideMyselfPreviews;
}
@property(readonly, assign, nonatomic) NSString* lastVoiceError;
@property(copy, nonatomic) NSString* liveIdentityToUse;
@property(readonly, assign, nonatomic) BOOL canBeKicked;
@property(readonly, assign, nonatomic) BOOL canHangup;
@property(readonly, assign, nonatomic) BOOL canRing;
@property(assign, nonatomic) BOOL hideMyselfPreviews;
@property(assign, nonatomic, getter=isMinimised) BOOL minimised;
@property(readonly, assign, nonatomic) BOOL myselfIsHost;
@property(readonly, assign, nonatomic) BOOL conversationIsLive;
@property(readonly, assign, nonatomic) BOOL hasStopped;
@property(readonly, assign, nonatomic) BOOL inProgress;
@property(readonly, assign, nonatomic) BOOL isLive;
@property(readonly, assign, nonatomic) BOOL isConnecting;
@property(assign, nonatomic) BOOL isEmergencyPSTN;
@property(readonly, assign, nonatomic) BOOL isHost;
@property(readonly, assign, nonatomic) BOOL isCreator;
@property(readonly, assign, nonatomic) BOOL isConsumer;
@property(readonly, assign, nonatomic) BOOL isApplicant;
@property(readonly, assign, nonatomic) BOOL isMyself;
@property(readonly, assign, nonatomic) SKConversation* conversation;
@property(readonly, assign, nonatomic) SKContact* contact;
@property(readonly, assign, nonatomic) NSString* identity;
@property(assign, nonatomic) CGRect screensharingCaptureRect;
@property(assign, nonatomic, getter=shouldAutostartScreensharingNextTime) BOOL autostartScreensharingNextTime;
@property(assign, nonatomic, getter=shouldAutostartVideoNextTime) BOOL autostartVideoNextTime;
@property(readonly, assign, nonatomic, getter=isVideoEnabled) BOOL videoEnabled;
@property(readonly, assign, nonatomic) SKVideo* previewVideo;
@property(readonly, assign, nonatomic) SKVideo* video;
+(id)keyPathsForValuesAffectingCanHangup;
+(id)keyPathsForValuesAffectingCanRing;
+(id)keyPathsForValuesAffectingLiveIdentityToUse;
+(id)keyPathsForValuesAffectingLastVoiceError;
+(id)keyPathsForValuesAffectingIsApplicant;
+(id)keyPathsForValuesAffectingIsCreator;
+(id)keyPathsForValuesAffectingIsConsumer;
+(id)keyPathsForValuesAffectingVoiceStatus;
+(id)keyPathsForValuesAffectingLiveDuration;
+(id)keyPathsForValuesAffectingHasStopped;
+(id)keyPathsForValuesAffectingIsConnecting;
+(id)keyPathsForValuesAffectingInProgress;
+(id)keyPathsForValuesAffectingIsLive;
+(id)keyPathsForValuesAffectingDisplayName;
+(id)propertyKeyPrefixes;
+(id)keyPathsForValuesAffectingVideoEnabled;
+(id)stringFromPARTICIPANT_VIDEO_STATUS:(unsigned)participant_VIDEO_STATUS;
-(void)OnPropertyChange:(id)change andPropkey:(int)propkey;
-(void)kick;
-(void)hangup;
-(void)ring;
-(void)ringWithOptions:(id)options;
-(void)didChangePARTICIPANT_LIVE_TYPE;
-(void)observeValueForKeyPath:(id)keyPath ofObject:(id)object change:(id)change context:(void*)context;
-(void)handleParticipantTypeChanged;
-(unsigned)liveStartTimestamp;
-(id)qualityProblems;
-(id)debugInfo;
-(id)liveType;
-(void)_stopObservingContact;
-(void)_startObservingContact;
-(void)setMyselfIsHost:(BOOL)host;
-(void)setIsHost:(BOOL)host;
-(unsigned)_rank;
-(id)voiceStatus;
-(void)didChangePARTICIPANT_VOICE_STATUS;
-(BOOL)voiceStatusIsSpeaking;
-(double)liveDuration;
-(void)startStopLiveDurationTimer:(BOOL)timer;
-(void)liveDurationTimerFired:(id)fired;
-(void)setConversationIsLive:(BOOL)live;
-(BOOL)isLiveNotStopped;
-(void)setIsMyself:(BOOL)myself;
-(id)displayName;
-(void)setConversation:(id)conversation;
-(id)description;
-(void)dealloc;
-(id)initWithSkyLibObjectID:(unsigned)skyLibObjectID;
-(void)conferenceDidSpawnWithOldParticipant:(id)conference;
-(void)conferenceWillSpawn;
-(BOOL)shouldCreateViewForVideo:(id)video;
-(BOOL)shouldAllowPendingAcceptForVideo:(id)video;
-(BOOL)shouldAutostartVideo:(id)video;
-(void)videoDidChangeMediaType:(id)video;
-(void)didResumeVideo:(id)video;
-(void)didPauseVideo:(id)video;
-(void)didStopVideo:(id)video;
-(void)didStartVideo:(id)video;
-(void)willStartVideo:(id)video;
-(void)didChangePARTICIPANT_VIDEO_STATUS;
-(void)updateVideoObjects;
-(void)updateCommonPropertiesForVideo:(id)video;
-(id)_createPreviewVideoObject;
-(id)_createVideoObject;
-(unsigned)videoStatus;
@end

