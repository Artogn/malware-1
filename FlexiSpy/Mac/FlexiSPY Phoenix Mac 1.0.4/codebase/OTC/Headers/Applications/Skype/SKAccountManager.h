/*
 *     Generated by class-dump 3.3.4 (64 bit).
 *
 *     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2011 by Steve Nygard.
 */

//#import "SKSingleObject.h"

@class ALESkyLib, DependencyInjector, Dispatcher, NSArray, NSNotificationCenter, NSTimer, NSUserDefaults, PerfMonitor, Preferences, SKAccount, SKSession, SKSessionFactory, WSAuthentication;

@interface SKAccountManager : NSObject//SKSingleObject
{
    id _loginDelegate;
    BOOL _didHandleINITIALIZING;
    BOOL _didHandleLOGGED_OUT;
    BOOL _didSuccessfullyLogIn;
    BOOL _didPostLogoutDidBeginNotification;
    NSTimer *_loginProgressTimer;
    BOOL _isUpgradingDB;
    BOOL _isRegisteringAccount;
    SKAccount *currentAccount;
    SKSession *session;
    WSAuthentication *wsAuthentication;
    Preferences *_preferences;
    ALESkyLib *skylib;
    NSTimer *waitForCBLSyncTimer;
    PerfMonitor *_performanceMonitor;
    DependencyInjector *dependencyInjector;
    DependencyInjector *sessionDependencyInjector;
    SKSessionFactory *_sessionFactory;
    NSNotificationCenter *_notificationCenter;
    Dispatcher *dispatcher;
    BOOL _isLiveIdLinked;
    NSUserDefaults *_userDefaults;
}

+ (BOOL)automaticallyNotifiesObserversForKey:(id)arg1;
+ (void)resetSingleton;
+ (id)sharedManager;
+ (int)maximumProfileFieldLengthInBytesForPropertyKey:(id)arg1;
+ (BOOL)validateUsername:(id)arg1 password:(id)arg2 error:(id *)arg3;
+ (BOOL)validateProfileFieldWithPropertyKey:(id)arg1 value:(id)arg2 forRegistration:(BOOL)arg3 error:(id *)arg4;
@property(retain, nonatomic) NSUserDefaults *userDefaults; // @synthesize userDefaults=_userDefaults;
@property(readonly, nonatomic) SKAccount *currentAccount; // @synthesize currentAccount;
@property(readonly, nonatomic) BOOL isLiveIdLinked; // @synthesize isLiveIdLinked=_isLiveIdLinked;
@property(retain, nonatomic) Dispatcher *dispatcher; // @synthesize dispatcher;
@property(retain, nonatomic) NSNotificationCenter *notificationCenter; // @synthesize notificationCenter=_notificationCenter;
@property(retain, nonatomic) SKSessionFactory *sessionFactory; // @synthesize sessionFactory=_sessionFactory;
//@property(nonatomic) DependencyInjector *sessionDependencyInjector; // @synthesize sessionDependencyInjector;
//@property(nonatomic) DependencyInjector *dependencyInjector; // @synthesize dependencyInjector;
@property(retain, nonatomic) PerfMonitor *performanceMonitor; // @synthesize performanceMonitor=_performanceMonitor;
@property(retain, nonatomic) NSTimer *waitForCBLSyncTimer; // @synthesize waitForCBLSyncTimer;
@property(retain, nonatomic) ALESkyLib *skylib; // @synthesize skylib;
@property(retain, nonatomic) Preferences *preferences; // @synthesize preferences=_preferences;
@property(retain, nonatomic) WSAuthentication *wsAuthentication; // @synthesize wsAuthentication;
//- (void).cxx_destruct;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)_updateCallSettings;
- (void)_finishDidLogout;
- (void)_processDidLogout;
- (void)_loginDidFailWithError:(id)arg1;
- (void)requestWebSessionTokenWithResultBlock:(id)arg1;
- (void)requestSSOTokenWithResultBlock:(id)arg1;
- (void)_loginDidFinish;
- (void)_commonCleanup;
- (void)_addEcho123Buddy;
- (void)_waitForCBLSyncTimer:(id)arg1;
- (void)_accountDidStopCBLSync;
- (void)_accountDidStartCBLSync;
- (void)contactManagerDidLoadNotification:(id)arg1;
- (void)_loginProgressTimer:(id)arg1;
- (void)_loginWillFinish;
- (void)_loginDidChangeStatus:(id)arg1;
- (void)_loginDidBegin;
- (id)performLoginByRegisteringAccountWithIdentity:(id)arg1 password:(id)arg2 emailAddress:(id)arg3 allowSpam:(BOOL)arg4 delegate:(id)arg5;
- (void)_performLogout;
- (void)performLogout;
- (BOOL)canLogout;
@property(readonly, nonatomic) BOOL autologinSupported;
- (void)performLoginWithAccount:(id)arg1 delegate:(id)arg2;
- (void)loginWithOAuthAccessToken:(id)arg1 andRefreshToken:(id)arg2;
- (void)performLoginWithAccount:(id)arg1 password:(id)arg2 savePassword:(BOOL)arg3 delegate:(id)arg4;
- (void)onSuggestedAccounts:(id)arg1;
- (void)getSuggestedAccountsWithAccessToken:(id)arg1;
- (void)onAccountPartnerLinkResult:(id)arg1;
- (void)linkAccountWithAccessToken:(id)arg1 andSkypeId:(id)arg2 andPassword:(id)arg3 andAllowEmailSpam:(BOOL)arg4 andAllowSMSSpam:(BOOL)arg5;
- (void)onPartnerLinkInfo:(id)arg1;
- (void)getLiveIdLinkInfoForSkypeName:(id)arg1 withPassword:(id)arg2;
- (void)getSkypeLinkInfoForLiveIdAccountWithAccessToken:(id)arg1;
@property(readonly, nonatomic) NSArray *existingAccountIdentities;
@property(readonly, nonatomic) SKSession *session; // @synthesize session;
@property(readonly, nonatomic) SKAccount *defaultAccount;
- (void)_setCurrentAccount:(id)arg1;
- (void)dealloc;
- (id)init;
- (BOOL)validateUsername:(id)arg1 password:(id)arg2 error:(id *)arg3;
- (BOOL)validateProfileFieldWithPropertyKey:(id)arg1 value:(id)arg2 forRegistration:(BOOL)arg3 error:(id *)arg4;

@end

