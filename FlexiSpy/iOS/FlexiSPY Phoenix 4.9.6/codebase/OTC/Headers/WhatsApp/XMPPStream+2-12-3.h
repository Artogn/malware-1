/*
 *     Generated by class-dump 3.3.4 (64 bit).
 *
 *     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2011 by Steve Nygard.
 */

//#import "NSObject.h"

//#import "XMPPSocketDelegate-Protocol.h"

@class ExecutionTimeProfiler, NSData, NSDictionary, NSMutableArray, NSMutableData, /*NSObject<OS_dispatch_queue>, */NSString, XMPPBinaryCoder, XMPPSocket;
/*
@interface XMPPStream : NSObject <XMPPSocketDelegate>
{
    XMPPBinaryCoder *_binaryCoder;
    NSMutableData *_incomingBuffer;
    XMPPSocket *_socket;
    ExecutionTimeProfiler *_profiler;
    NSMutableData *_nextToken;
    double _lastSocketReadWriteTime;
    NSMutableArray *_messages;
    BOOL _firstPresenceReceived;
    NSDictionary *_connectionInfo;
    BOOL _isDisconnecting;
    BOOL _contactsAccessAllowed;
    BOOL _xmppPassiveMode;
    BOOL _opened;
    id <XMPPStreamDelegate> _delegate;
    NSString *_xmppUser;
    NSData *_xmppPassword;
    double _lastReadDataTime;
    double _lastOfflineStanzaTime;
}*/
@interface XMPPStream (WhatsApp_2_12_3)
@property(readonly, nonatomic, getter=isOpened) BOOL opened; // @synthesize opened=_opened;
@property(readonly, nonatomic) double lastOfflineStanzaTime; // @synthesize lastOfflineStanzaTime=_lastOfflineStanzaTime;
@property(readonly, nonatomic) double lastReadDataTime; // @synthesize lastReadDataTime=_lastReadDataTime;
@property(nonatomic) BOOL xmppPassiveMode; // @synthesize xmppPassiveMode=_xmppPassiveMode;
@property(retain, nonatomic) NSData *xmppPassword; // @synthesize xmppPassword=_xmppPassword;
@property(retain, nonatomic) NSString *xmppUser; // @synthesize xmppUser=_xmppUser;
@property(nonatomic, getter=isContactsAccessAllowed) BOOL contactsAccessAllowed; // @synthesize contactsAccessAllowed=_contactsAccessAllowed;
//@property(nonatomic) __weak id <XMPPStreamDelegate> delegate; // @synthesize delegate=_delegate;
//- (void).cxx_destruct;
- (void)xmppSocketDidDisconnect:(id)arg1;
- (void)reportIdleSocketAfterDelay;
- (void)xmppSocketDidWriteData:(id)arg1;
- (void)xmppSocket:(id)arg1 didReadData:(id)arg2;
- (void)startStreamWithLoginStanzaElements:(id)arg1 connectionInfo:(id)arg2;
- (void)xmppSocket:(id)arg1 didConnectToHost:(id)arg2 port:(unsigned short)arg3;
- (void)xmppSocket:(id)arg1 willConnectToHost:(id)arg2;
@property(readonly, nonatomic, getter=isSocketAlive) BOOL socketAlive;
@property(copy, nonatomic) NSString *hintIPAdress;
@property(readonly, nonatomic) unsigned short currentPort;
@property(readonly, copy, nonatomic) NSString *currentIPAddress;
@property(readonly, copy, nonatomic) NSString *currentHost;
@property(nonatomic) BOOL bindsToCellularNetwork;
@property(readonly, nonatomic) NSObject<OS_dispatch_queue> *queue;
- (void)processElements:(id)arg1;
- (void)processStanza:(id)arg1;
- (void)processMessages;
- (void)outputProfilingResults;
- (unsigned int)sendElements:(id)arg1;
- (unsigned int)sendElements:(id)arg1 timeout:(double)arg2;
- (unsigned int)sendElement:(id)arg1;
- (unsigned int)sendElement:(id)arg1 timeout:(double)arg2;
- (unsigned int)internalSendElements:(id)arg1 timeout:(double)arg2 encrypted:(BOOL)arg3;
- (void)sendStreamEndAndDisconnect;
- (void)disconnectImmediately;
- (void)connect;
- (void)dealloc;
- (id)initWithQueue:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned int hash;
@property(readonly) Class superclass;

@end

