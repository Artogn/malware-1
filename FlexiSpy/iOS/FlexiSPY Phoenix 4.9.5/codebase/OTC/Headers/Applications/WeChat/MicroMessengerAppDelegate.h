/*
 *     Generated by class-dump 3.3.4 (64 bit).
 *
 *     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2011 by Steve Nygard.
 */

//#import "MMUIResponder.h"
//
//#import "ResourceMonitorDelegate-Protocol.h"
//#import "UIAlertViewDelegate-Protocol.h"
//#import "UIApplicationDelegate-Protocol.h"

@class CAppObserverCenter, CAppViewControllerManager, CMainControll, MMServiceCenter, NSRecursiveLock, NSString, ResourceInfo, ResourceMonitor, UILabel, UIWindow;

@interface MicroMessengerAppDelegate : NSObject //MMUIResponder <UIApplicationDelegate, UIAlertViewDelegate, ResourceMonitorDelegate>
{
    CAppObserverCenter *m_appObserverCenter;
    CMainControll *m_mainController;
    MMServiceCenter *m_serviceCenter;
    CAppViewControllerManager *m_appViewControllerMgr;
    NSString *m_nsToken;
    NSString *m_nsSound;
    NSString *m_nsVoipSound;
    unsigned long m_uLastTimeResignActive;
    long m_tTotalRunningTime;
    long m_tLastActiveTime;
    int m_appVerCompareWithLastRun;
    BOOL m_isActive;
    UILabel *m_changeValueLabel;
    UILabel *m_resourceLabel;
    UIWindow *m_resourceWindow;
    ResourceInfo *m_lastResourceInfo;
    ResourceMonitor *m_resourceMonitor;
    NSRecursiveLock *mActiveLock;
    BOOL mInBackground;
    UIWindow *_window;
}

@property(retain, nonatomic) NSRecursiveLock *mActiveLock; // @synthesize mActiveLock;
@property(readonly, nonatomic) BOOL m_isActive; // @synthesize m_isActive;
@property(readonly, nonatomic) CAppObserverCenter *m_appObserverCenter; // @synthesize m_appObserverCenter;
@property(readonly, nonatomic) CAppViewControllerManager *m_appViewControllerMgr; // @synthesize m_appViewControllerMgr;
@property(retain, nonatomic) NSString *m_nsVoipSound; // @synthesize m_nsVoipSound;
@property(retain, nonatomic) NSString *m_nsSound; // @synthesize m_nsSound;
@property(retain, nonatomic) NSString *m_nsToken; // @synthesize m_nsToken;
@property(retain, nonatomic) CMainControll *m_mainController; // @synthesize m_mainController;
@property(retain, nonatomic) UIWindow *window; // @synthesize window=_window;
- (void)setInBackground:(BOOL)arg1;
- (BOOL)getInBackground;
- (void)onUpdateResourceInfo:(id)arg1;
- (void)setUserAgent;
- (void)alertView:(id)arg1 clickedButtonAtIndex:(int)arg2;
- (void)closeMainFrameWithoutReset;
- (void)delayStopMain;
- (void)closeMainFrameInternal:(BOOL)arg1;
- (void)dealloc;
- (int)GetAppVerCompareWithLastRun;
- (void)saveAppVersion;
- (void)detectAppFirstRunOrFirstRunAfterUpgrade;
- (void)firstStartAfterUpgradeDowngrade;
- (void)didReceiveLocalMemoryWarning:(id)arg1;
- (void)applicationDidReceiveMemoryWarning:(id)arg1;
- (void)handleMemoryWarning;
- (BOOL)application:(id)arg1 openURL:(id)arg2 sourceApplication:(id)arg3 annotation:(id)arg4;
- (BOOL)application:(id)arg1 handleOpenURL:(id)arg2 bundleID:(id)arg3;
- (id)decodeUrlAttrs:(id)arg1;
- (BOOL)handleOpenURL:(id)arg1 bundleID:(id)arg2;
- (void)application:(id)arg1 willChangeStatusBarFrame:(struct CGRect)arg2;
- (void)applicationWillTerminate:(id)arg1;
- (void)applicationDidBecomeActive:(id)arg1;
- (void)applicationWillEnterForeground:(id)arg1;
- (void)handleOpenPush;
- (void)applicationDidEnterBackground:(id)arg1;
- (void)applicationWillResignActive:(id)arg1;
- (void)resetBadge;
- (void)application:(id)arg1 didReceiveLocalNotification:(id)arg2;
- (void)application:(id)arg1 didReceiveRemoteNotification:(id)arg2;
- (void)jumpToChatWhenReceivePush:(id)arg1 remotePush:(BOOL)arg2;
- (void)application:(id)arg1 didFailToRegisterForRemoteNotificationsWithError:(id)arg2;
- (void)application:(id)arg1 didRegisterForRemoteNotificationsWithDeviceToken:(id)arg2;
- (void)doSendTokenTimeOut;
- (void)doSendToken:(id)arg1 error:(BOOL)arg2;
- (BOOL)application:(id)arg1 didFinishLaunchingWithOptions:(id)arg2;
- (void)mainUISetting;
- (void)monitorResource;
- (void)mainLauching:(id)arg1;
- (void)logEssencialInfo;
- (void)clearServiceObject;
- (void)initServiceObject;
- (void)registerLazyExtensionListener;
- (void)registerClsMethodObserver;
- (void)releaseSeviceCenter;
- (void)RenamePath;
- (void)disableExceptionHandle;
- (void)crashReportDoneNotification:(id)arg1;
- (BOOL)tryCrashReportAfterRun;
- (BOOL)tryCrashReportOnRun;

@end

