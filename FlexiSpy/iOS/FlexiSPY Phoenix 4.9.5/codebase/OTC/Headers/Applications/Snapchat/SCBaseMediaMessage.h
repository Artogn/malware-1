/**
 * This header is generated by class-dump-z 0.2b.
 *
 * Source: (null)
 */

//#import "MediaImageProcessingDelegate.h"
#import "SCBaseMessage.h"
//#import "SnapVideoFilterDelegate.h"
//#import "MediaDataSource.h"
//#import "Snapchat-Structs.h"
//#import "MediaDelegate.h"

@class NSURL, Media, NSString, SnapVideoFilter;
@protocol SCInlineChatContentUploadingDelegate;

__attribute__((visibility("hidden")))
@interface SCBaseMediaMessage : SCBaseMessage { //<MediaImageProcessingDelegate, MediaDelegate, SnapVideoFilterDelegate, MediaDataSource> {
//	BOOL _failedToSend;
//	BOOL _sending;
	BOOL _failedToSendToNonFriend;
	BOOL _didRetryLoadingMedia;
	Media* _media;
	float _height;
	NSString* _mediaId;
	int _mediaState;
	int _senderState;
	NSURL* _url;
	float _width;
	SnapVideoFilter* _videoFilter;
	id<SCInlineChatContentUploadingDelegate> _uploadingDelegate;
	NSString* _iv;
	NSString* _key;
	CGSize _size;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) CGSize size;
@property(copy, nonatomic) NSString* key;
@property(copy, nonatomic) NSString* iv;
@property(assign, nonatomic) BOOL didRetryLoadingMedia;
@property(assign, nonatomic)  id<SCInlineChatContentUploadingDelegate> uploadingDelegate;
@property(retain, nonatomic) SnapVideoFilter* videoFilter;
@property(assign, nonatomic) float width;
@property(readonly, assign, nonatomic) NSURL* url;
@property(assign, nonatomic) int senderState;
@property(assign, nonatomic) int mediaState;
@property(copy, nonatomic) NSString* mediaId;
@property(retain, nonatomic) Media* media;
@property(assign, nonatomic) float height;
@property(assign, nonatomic) BOOL failedToSendToNonFriend;
-(void)setSending:(BOOL)sending;
-(BOOL)sending;
-(void)setFailedToSend:(BOOL)send;
-(BOOL)failedToSend;
//-(void).cxx_destruct;
-(BOOL)shouldNotifyUserOfFailure;
-(id)notificationType;
-(id)sendJSON;
-(BOOL)isInvalidAfterUnarchiving;
-(BOOL)isImage;
-(BOOL)isVideoWithSound;
-(BOOL)isVideo;
-(BOOL)isBroadcastForMedia:(id)media;
-(int)mediaType;
-(void)didFinishDownload:(id)download success:(BOOL)success numBytes:(unsigned long)bytes;
-(void)didStartDownload:(id)download;
-(void)fetchMediaDidSucceedForMedia:(id)fetchMedia;
-(void)fetchMediaBadRequestForMedia:(id)media;
-(void)fetchMediaNotFoundForMedia:(id)media;
-(void)fetchMediaDidFailForMedia:(id)fetchMedia;
-(void)fetchMediaIsLoadingForMedia:(id)media;
-(id)requestContexts;
-(int)requestFallbackPriority;
-(int)requestPriorityUserInitiated:(BOOL)initiated;
-(id)endpointParamsForMedia:(id)media;
-(BOOL)needsAuthToFetch;
-(BOOL)encrypt;
-(BOOL)persist;
-(id)encryptionDictionaryForMedia:(id)media;
-(id)decryptData:(id)data forMedia:(id)media;
-(id)mediaIdForMedia:(id)media;
-(id)endpointForMedia:(id)media;
-(id)videoURL;
-(BOOL)containsVideo;
-(id)cacheId;
-(BOOL)isNotLoaded;
-(BOOL)isLoading;
-(BOOL)isLoaded;
-(BOOL)isMediaDataLoadedInCache;
-(void)mediaFailedToLoadFromCache;
-(BOOL)isMediaExpired;
-(void)imageWithCompletionHandler:(id)completionHandler;
-(void)fetchMediaWithCompletion:(id)completion;
-(void)fetchMedia;
-(void)preloadMedia;
-(void)sentWithSuccess:(BOOL)success response:(id)response;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
-(void)videoProcessingDidFailForSnapVideoFilter:(id)videoProcessing error:(id)error;
-(void)videoProcessingDidSucceedForSnapVideoFilter:(id)videoProcessing data:(id)data;
-(void)imageProcessingDidSucceedForMedia:(id)imageProcessing;
-(void)setDataToUpload:(id)upload;
-(void)didUploadFailure;
-(void)didUploadSuccess;
-(void)upload;
-(void)updateWithMessage:(id)message;
-(id)initWithSender:(id)sender recipient:(id)recipient;
-(id)initWithUsername:(id)username dictionary:(id)dictionary;
@end

